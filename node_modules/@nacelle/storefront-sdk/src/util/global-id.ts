import { DataSourceName, EntryType } from '../types/entry-model';
import { decodeBase64, encodeBase64 } from './base64';

export const gidPrefix = 'gid://';
export const encodedGidPrefix = 'Z2lkOi8v';

/**
 * @description Base64 encoded string starting with 'gid://'
 */
export type GlobalId = string;

/**
 * @description EntryId is a Global ID, so a base64 encoded string with the following format:
 * `gid://<data-source>/<entry-type>/<data-source-id>/<data-source-subset>/<id>`.
 * This represents a Nacelle Entry.
 *
 * - **< data-source >** should be a DataSourceName enum.
 * - **< entry-type >** should be an EntryType enum.
 * - **< data-source-id >** should be the unique id for the data-source.
 * - **< subset >** should be a key representing a partition of the datasource.
 * - - **< id >** should be the original, raw id for the entry.
 */
export type EntryId = GlobalId;

export interface EntryIdParts {
  decodedGid: string;
  id: string;
  source: DataSourceName;
  sourceUniqueId: string;
  type: EntryType;
  subset: string;
}

/**
 * @example
 * const gid = constructEntryId(34789515, 'sanity', 'ciu31kkt', 'content', 'development');
 *
 * @description Builds an identifier following the pattern we understand to be a Global Id.
 * Global Id follows this pattern:
 * `gid://<data-source>/<entry-type>/<id>`, and is encoded as a Base64 string.
 *
 * @param id {string | number} - An string or number that identifies an entry.
 * @param source {string} - The name of the source lowercase like 'shopify' or 'sanity'
 * @param sourceUniqueId {string} - The unique identifier for the data within the vendor's
 * system. This would be the domain for Shopify, or the spaceId for Contentful.
 * @param type {string} - Entry type singular and lowercase like 'product', 'product-content'
 * @param subset {string} - subset of data could be environment (Contentful) or dataset (Sanity).
 * - https://www.contentful.com/developers/docs/concepts/multiple-environments/
 * - https://www.sanity.io/docs/datasets
 *
 * @return returns a global id
 */
export function constructEntryId(
  id: string | number,
  source: DataSourceName,
  sourceUniqueId: string,
  type: string,
  subset: string
): EntryId {
  return encodeBase64(
    `${gidPrefix}${source}/${sourceUniqueId}/${subset}/${type}/${id}`
  );
}

/**
 * @example
 * const {
    decodedGid,
    id,
    source,
    sourceUniqueId,
    type,
    subset
  } = deconstructEntryId('Z2lkOi8vc2hvcGlmeS9NZXRhZmllbGQvMTE3NTU2MjU2NDQwODk=');
 *
 * @description Deconstructs a properly formatted Global Id into its respective parts.
 * Global Id follows this pattern:
 * `gid://<data-source>/<source-unique-id>/<subset>/<entry-type>/<id>`, and is encoded as a Base64 string.
 *
 * @param gid {string} - An string that represents an entry's global id.
 *
 * @return returns a object that can be deconstructed for:
 * - a decoded version of the EntryId
 * - the base identifier as either a string or number
 * - the entry's data source
 * - the data source unique id
 * - the entry's type
 * - the data source subset
 */
export function deconstructEntryId(gid: EntryId): EntryIdParts {
  const decodedGid = decodeBase64(gid);
  const [source, sourceUniqueId, subset, type, id] = decodedGid
    .split(gidPrefix)[1]
    .split('/');
  return {
    decodedGid,
    id,
    source: source as DataSourceName,
    sourceUniqueId,
    type: type as EntryType,
    subset,
  };
}

/**
 * @example
 * const gid = convertEntryId(34789515, 'sanity', 'ciu31kkt', 'content', 'development');
 *
 * @description Will identify the format of the id and make sure it returns what we understand to be a Global Id.
 * Global Id follows this pattern:
 * `gid://<data-source>/<source-unique-id>/<subset>/<entry-type>/<id>`, and is encoded as a Base64 string.
 *
 * - If it is a number, we know it is not a gid and we can construct one.
 * - If it includes the gidPrefix we know it is global id, but not encoded, so we encode to Base64
 * - If it includes the encodedGidPrefix we know it is a well formed gid, and can return it
 * - All other id formats are assumed to be unique ids and formatted into our global form.
 *
 * @param id {string | number} - An string or number that identifies an entry.
 * @param source {string} - The name of the source lowercase like 'shopify' or 'sanity'
 * @param sourceUniqueId {string} - The source's unique id
 * @param type {string} - Entry type singular and lowercase like 'product' or 'product-content'
 * @param subset {string} - subset of data could be environment or dataset.
 *
 * @return returns a global id
 */
export function convertEntryId(
  id: string | number,
  source: DataSourceName,
  sourceUniqueId: string,
  type: EntryType,
  subset: string
): EntryId {
  if (typeof id === 'number') {
    return constructEntryId(id, source, sourceUniqueId, type, subset);
  }
  if (id.includes(gidPrefix)) {
    return encodeBase64(id);
  }
  if (id.includes(encodedGidPrefix)) {
    return id;
  }
  return constructEntryId(id, source, sourceUniqueId, type, subset);
}

/**
 * @description A function that tests if an ID is a nacelleEntryId for an entry by passing it through a series of test conditions.
 * - Must be a non empty string.
 * - Must be encoded base64 and start with gid prefix
 * - Must have all parts so it can be destructured.
 *
 * @param id {string} An id to test
 *
 * @returns True if the argument passes all of the tests, False if it fails even one of the tests.
 */
export function isEntryId(id: string | number): boolean {
  return (
    typeof id === 'string' &&
    id.includes(encodedGidPrefix) &&
    decodeBase64(id).split(gidPrefix)[1].split('/').length === 5
  );
}
