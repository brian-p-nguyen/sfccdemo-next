import { Edge, Connection } from '../types';

export function nodesFromEdges<T>(edges: Edge<T>[] | undefined): T[] {
  return edges ? edges.map(({ node }) => node) : [];
}

export function lastEdgeCursor<T>(
  edges: Edge<T>[] | undefined
): string | undefined {
  return edges && edges.length > 0 ? edges[edges.length - 1].cursor : undefined;
}

export function mapCollectionConnectionToArray<
  T,
  C,
  ConnectionKey extends keyof C,
  PlacementKey extends keyof C
>(collection: C, connectionKey: ConnectionKey, placementKey: PlacementKey): C {
  const connection = collection[connectionKey] as unknown as Connection<T>;
  return {
    ...collection,
    [placementKey]: nodesFromEdges(connection.edges),
  };
}
