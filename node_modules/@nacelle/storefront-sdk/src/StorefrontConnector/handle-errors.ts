import { GraphQLResponseRoot, GraphQLResponseError } from '../types/graphql';
import { StorefrontConnectorParams } from '../types/storefront-connector';

export const isGraphQLError = (data: GraphQLResponseRoot): boolean => {
  return Boolean(data.errors && data.errors.length > 0);
};

export const handleGraphqlErrors = (
  connectorParams: StorefrontConnectorParams,
  errors?: GraphQLResponseError[]
): void => {
  let errorMessage = 'Storefront GraphQL Error:';

  if (errors && errors.length > 0) {
    const { unauthenticated, otherErrors } = errors.reduce(
      (categories, error) => {
        if (error.extensions?.code === 'UNAUTHENTICATED') {
          categories.unauthenticated.push(error);
        } else {
          categories.otherErrors.push(error);
        }

        return categories;
      },
      { unauthenticated: [], otherErrors: [] } as {
        unauthenticated: GraphQLResponseError[];
        otherErrors: GraphQLResponseError[];
      }
    );

    unauthenticated.forEach((error) => {
      if (
        error.message.indexOf('x-nacelle-space-token') > -1 ||
        error.message.indexOf('Token is invalid') > -1
      ) {
        errorMessage += ` The Storefront SDK client is trying to use an invalid Storefront API token, ${connectorParams.token}, for ${connectorParams.endpoint}.
Please verify that the client is initialized with the correct token parameter.'`;
      }
    });

    otherErrors.forEach((error, index, arr) => {
      const { nacelleErrorId } = error.extensions || {};
      const displayIndex =
        arr.length > 1 ? ` (${index + 1} of ${arr.length}) ` : '';
      const displayErrorId = nacelleErrorId
        ? ` (Error Ref Id: ${nacelleErrorId})`
        : '';

      errorMessage += `${displayIndex}${error.message}${displayErrorId}`;
    });

    if (connectorParams.debugMode) {
      console.info(
        'Storefront SDK Debug: GraphQL Error Details',
        JSON.stringify(errors)
      );
    }

    throw new Error(errorMessage);
  }
};
