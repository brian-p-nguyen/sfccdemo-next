import { Content, ContentCollection, NavigationGroup, Product, ProductCollection, SpaceProperties, ProductCollectionEdge, ContentCollectionEdge, ProductEdge, ContentEdge } from '../types/graphql-generated';
import { FetchCollectionMethodParams, FetchContentMethodParams, FetchMethodParams, FetchCollectionEntriesMethodParams, HttpClient, NavigationParams, RequestParams, StorefrontConnectorParams, StorefrontRequestResponse, QueryParams, Edge } from '../types';
export default class StorefrontConnector {
    token: string;
    endpoint: string;
    locale: string;
    httpClient: HttpClient;
    debugMode: boolean;
    constructor(params: StorefrontConnectorParams);
    request<T>(params: RequestParams): Promise<StorefrontRequestResponse<T>>;
    requestCollectionEntries<T, C, Key extends keyof C>(options: {
        query: string;
        queryName: string;
        key: Key;
        params: FetchCollectionEntriesMethodParams;
    }): Promise<Array<T | Edge<T>>>;
    /**
     * @description This is a helper method for fetching either pages of entries of
     * a given entry type or fetching entries by id or handles.
     * @param query The query to perform
     * @param queryName The query operation name
     * @param params method parameters that will be transformed into Storefront GraphQL
     * query variables.
     * @returns A promise for an array of type T
     */
    requestEntries<T extends {
        nacelleEntryId: string;
    }>(query: string, queryName: string, params?: FetchMethodParams | FetchCollectionMethodParams | FetchContentMethodParams): Promise<Array<T | Edge<T>>>;
    products(params?: FetchMethodParams): Promise<Array<Product | ProductEdge>>;
    productCollections(params?: FetchCollectionMethodParams): Promise<Array<ProductCollection | ProductCollectionEdge>>;
    content(params?: FetchContentMethodParams): Promise<Array<Content | ContentEdge>>;
    contentCollections(params?: FetchCollectionMethodParams): Promise<Array<ContentCollection | ContentCollectionEdge>>;
    navigation(params?: NavigationParams): Promise<NavigationGroup[]>;
    query(params: QueryParams): Promise<JSON>;
    spaceProperties(): Promise<SpaceProperties>;
    productCollectionEntries(params: FetchCollectionEntriesMethodParams): Promise<Array<Product | ProductEdge>>;
    contentCollectionEntries(params: FetchCollectionEntriesMethodParams): Promise<Array<Content | ContentEdge>>;
}
