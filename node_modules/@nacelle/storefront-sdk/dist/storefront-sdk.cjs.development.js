'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fetch = require('cross-fetch');
var core = require('@urql/core');
var graphqlWs = require('graphql-ws');
var wonka = require('wonka');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var runtime = {exports: {}};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (module) {
var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
}(runtime));

var _regeneratorRuntime = runtime.exports;

var metafield = "\n  id\n  key\n  namespace\n  value\n";

var contentCollection = "\n  createdAt\n  indexedAt\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  sourceEntryId\n  sourceId\n  tags\n  updatedAt\n";

var content = "\n  createdAt\n  fields\n  handle\n  indexedAt\n  locale\n  nacelleEntryId\n  published\n  sourceEntryId\n  sourceId\n  title\n  type\n  updatedAt\n";

var media = "\n  altText\n  id\n  mimeType\n  src\n  thumbnailSrc\n  type\n";

var collectionContent = "\n  collectionEntryId\n  createdAt\n  description\n  featuredMedia {\n    " + media + "\n  }\n  fields\n  handle\n  indexedAt\n  locale\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  # published\n  sourceEntryId\n  sourceId\n  title\n  updatedAt\n";

var contentCollectionsQuery = "\nquery contentCollectionsQuery(\n  $filter: ContentCollectionFilterInput,\n  $maxReturnedEntriesPerCollection: Int\n) {\n  contentCollections(filter: $filter) {\n    " + contentCollection + "\n    entries(first: $maxReturnedEntriesPerCollection) {\n      " + content + "\n    }\n    content {\n      " + collectionContent + "\n    }\n  }\n}\n";
var contentCollectionEntriesQuery = "\nquery contentCollectionEntries(\n  $filter: ContentCollectionFilterInput,\n  $contentFirst: Int,\n  $contentAfter: String\n) {\n  contentCollections(filter: $filter) {\n    entries(first: $contentFirst, after: $contentAfter) {\n      " + content + "\n    }\n  }\n}\n";
var allContentCollectionsQuery = "\nquery allContentCollectionsQuery(\n  $filter: ContentCollectionFilterInput,\n  $maxReturnedEntriesPerCollection: Int\n) {\n  allContentCollections(filter: $filter) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        " + contentCollection + "\n        contentConnection(first: $maxReturnedEntriesPerCollection) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              " + content + "\n            }\n          }\n        }\n        content {\n          " + collectionContent + "\n        }\n      }\n    }\n  }\n}\n";
var allContentCollectionEntriesQuery = "\nquery contentCollectionEntries(\n  $filter: ContentCollectionFilterInput,\n  $entriesFirst: Int,\n  $entriesAfter: String\n) {\n  allContentCollections(filter: $filter) {\n    edges {\n      node {\n        contentConnection(first: $entriesFirst, after: $entriesAfter) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              " + content + "\n            }\n          }\n        }\n      }\n    }\n  }\n}\n";

var contentQuery = "\nquery content(\n  $filter: ContentFilterInput\n) {\n  content(filter: $filter) {\n    " + content + "\n  }\n}\n";
var allContentQuery = "\nquery allContent($filter: ContentFilterInput) {\n  allContent(filter: $filter) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        " + content + "\n      }\n    }\n  }\n}\n";

var navigation = "\nfragment NavigationItem on NavigationGroupItem {\n\ttitle\n\turl\n}\n\nquery ($filter: NavigationFilterInput) {\n\tnavigation(filter: $filter) {\n\t\tgroupId\n\t\ttitle\n\t\tupdatedAt\n\t\tupdatedBy\n\t\titems {\n\t\t\t...NavigationItem\n\t\t\titems {\n\t\t\t\t...NavigationItem\n\t\t\t\titems {\n\t\t\t\t\t...NavigationItem\n\t\t\t\t\titems {\n\t\t\t\t\t\t...NavigationItem\n\t\t\t\t\t\titems {\n\t\t\t\t\t\t\t...NavigationItem\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n";

var option = "\n  name\n  values\n";

var seo = "\n  title\n  description\n";

var productContent = "\n  createdAt\n  description\n  featuredMedia {\n    " + media + "\n  }\n  fields\n  handle\n  indexedAt\n  locale\n  media {\n    " + media + "\n  }\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  options {\n    " + option + "\n  }\n  productEntryId\n  published\n  seo {\n    " + seo + "\n  }\n  sourceEntryId\n  sourceId\n  title\n  updatedAt\n";

var variantContentFragment = "\n  createdAt\n  description\n  featuredMedia {\n    " + media + "\n  }\n  fields\n  indexedAt\n  locale\n  media {\n    " + media + "\n  }\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  productEntryId\n  productHandle\n  published\n  selectedOptions {\n    label\n    name\n    value\n  }\n  sourceEntryId\n  sourceId\n  swatchSrc\n  title\n  updatedAt\n  variantEntryId\n";

var productPriceBreaksFragment = "\n  metafields {\n    " + metafield + "\n  }\n  price\n  quantityMax\n  quantityMin\n";
var productPriceRulesFragment = "\n  availableTo\n  comparedAtPrice\n  handle\n  id\n  metafields {\n    " + metafield + "\n  }\n  price\n  priceBreaks {\n    " + productPriceBreaksFragment + "\n  }\n  priceCurrency\n  title\n";
var variantFragment = "\n  availableForSale\n  compareAtPrice\n  content {\n    " + variantContentFragment + "\n  }\n  createdAt\n  indexedAt\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  price\n  priceCurrency\n  priceRules {\n    " + productPriceRulesFragment + "\n  }\n  productEntryId\n  productHandle\n  quantityAvailable\n  sku\n  sourceEntryId\n  sourceId\n  updatedAt\n  weight\n  weightUnit\n";

var productFragmentSubset = "\n  availableForSale\n  createdAt\n  indexedAt\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  productType\n  sourceEntryId\n  sourceId\n  tags\n  updatedAt\n  vendor\n";
var product = "\n  " + productFragmentSubset + "\n  variants {\n    " + variantFragment + "\n  }\n  content {\n    " + productContent + "\n  }\n";

var productCollectionFragmentSubset = "\n  createdAt\n  indexedAt\n  metafields {\n    " + metafield + "\n  }\n  nacelleEntryId\n  sourceEntryId\n  sourceId\n  tags\n  updatedAt\n";

var productCollectionsQuery = "\nquery productCollections(\n  $filter: ProductCollectionFilterInput,\n  $maxReturnedEntriesPerCollection: Int\n) {\n  productCollections(filter: $filter) {\n    " + productCollectionFragmentSubset + "\n    content {\n      " + collectionContent + "\n    }\n    products(first: $maxReturnedEntriesPerCollection) {\n      " + product + "\n    }\n  }\n}\n";
var productCollectionEntriesQuery = "\nquery productCollectionEntries(\n  $filter: ProductCollectionFilterInput,\n  $entriesFirst: Int,\n  $entriesAfter: String\n) {\n  productCollections(filter: $filter) {\n    products(first: $entriesFirst, after: $entriesAfter) {\n      " + product + "\n    }\n  }\n}\n";
var allProductCollectionsQuery = "\nquery allProductCollections(\n  $filter: ProductCollectionFilterInput,\n  $maxReturnedEntriesPerCollection: Int\n) {\n  allProductCollections(filter: $filter) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        " + productCollectionFragmentSubset + "\n        content {\n          " + collectionContent + "\n        }\n        productConnection(first: $maxReturnedEntriesPerCollection) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              " + product + "\n            }\n          }\n        }\n      }\n    }\n  }\n}\n";
var allProductCollectionEntriesQuery = "\nquery productCollectionEntries(\n  $filter: ProductCollectionFilterInput,\n  $entriesFirst: Int,\n  $entriesAfter: String\n) {\n  allProductCollections(filter: $filter) {\n    edges {\n      node {\n        productConnection(first: $entriesFirst, after: $entriesAfter) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              " + product + "\n            }\n          }\n        }\n      }\n    }\n  }\n}\n";

var productsQuery = "\nquery products(\n  $filter: ProductFilterInput,\n) {\n  products(filter: $filter) {\n    " + productFragmentSubset + "\n    variants {\n      " + variantFragment + "\n    }\n    content {\n      " + productContent + "\n    }\n  }\n}\n";
var allProductsQuery = "\nquery allProducts($filter: ProductFilterInput) {\n  allProducts(filter: $filter) {\n    pageInfo {\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        " + productFragmentSubset + "\n        variants {\n          " + variantFragment + "\n        }\n        content {\n          " + productContent + "\n        }\n      }\n    }\n  }\n}\n";

var spaceQuery = "\nquery {\n  spaceProperties {\n\t\tproperties {\n\t\t\titems {\n\t\t\t\tkey\n\t\t\t\tvalue\n\t\t\t}\n\t\t\tnamespace\n\t\t}\n\t\tupdatedAt\n\t\tupdatedBy\n\t}\n}\n";

var productSubscription = "\nsubscription Subscription($productInventoryUpdatedFilter: InventoryItemsSubscriptionFilterInput) {\n  productInventoryUpdated (filter: $productInventoryUpdatedFilter) {\n    nacelleEntryId\n    entryType\n    availableForSale\n  }\n}";

var productVariantSubscription = "subscription Subscription($variantInventoryUpdatedFilter: InventoryItemsSubscriptionFilterInput) {\n    variantInventoryUpdated (filter: $variantInventoryUpdatedFilter) {\n      nacelleEntryId\n      entryType\n      availableForSale\n    }\n  }";

var DEFAULT_PAGE_FETCH_LIMIT = 250;
var DEFAULT_MAX_ENTRIES = -1; // Always fetch complete index by default

var DEFAULT_MAX_ENTRIES_PER_COLLECTION = 25;

function keepFetchingItems(fetchedItems, totalItems, maxReturnedEntries) {
  var lessItemsThanRequested = maxReturnedEntries ? maxReturnedEntries === -1 || totalItems.length < maxReturnedEntries : true;
  return fetchedItems.length > 0 && lessItemsThanRequested;
}
function keepFetchingItemsUsingNextPage(hasNextPage, totalItems, maxReturnedEntries) {
  var lessItemsThanRequested = typeof maxReturnedEntries === 'undefined' || maxReturnedEntries === -1 ? true : maxReturnedEntries !== 0 && totalItems.length < maxReturnedEntries;
  return Boolean(hasNextPage) && lessItemsThanRequested;
}

var _excluded$1 = ["headers"];
var HttpClientFetch = /*#__PURE__*/function () {
  function HttpClientFetch(options) {
    this.options = void 0;
    var defaultOptions = {
      timeout: 240000
    };
    var defaultHeaders = {
      'Content-Type': 'application/json',
      'x-nacelle-sdk-version': ''
    };

    var _ref = options || {},
        headers = _ref.headers,
        otherOptions = _objectWithoutPropertiesLoose(_ref, _excluded$1);

    this.options = _extends({
      headers: _extends({}, defaultHeaders, headers)
    }, defaultOptions, otherOptions);
  }

  var _proto = HttpClientFetch.prototype;

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
      var response, data;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch__default["default"](url, _extends({}, this.options, {
                method: 'GET'
              }));

            case 2:
              response = _context.sent;
              _context.next = 5;
              return response.json();

            case 5:
              data = _context.sent;
              return _context.abrupt("return", {
                headers: response.headers,
                status: response.status,
                statusText: response.statusText,
                data: data
              });

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.post = /*#__PURE__*/function () {
    var _post = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, data) {
      var response, responseData;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return fetch__default["default"](url, _extends({}, this.options, {
                method: 'POST',
                body: JSON.stringify(data)
              }));

            case 2:
              response = _context2.sent;
              _context2.next = 5;
              return response.json();

            case 5:
              responseData = _context2.sent;
              return _context2.abrupt("return", {
                headers: response.headers,
                status: response.status,
                statusText: response.statusText,
                data: responseData
              });

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function post(_x2, _x3) {
      return _post.apply(this, arguments);
    }

    return post;
  }();

  return HttpClientFetch;
}();

var isGraphQLError = function isGraphQLError(data) {
  return Boolean(data.errors && data.errors.length > 0);
};
var handleGraphqlErrors = function handleGraphqlErrors(connectorParams, errors) {
  var errorMessage = 'Storefront GraphQL Error:';

  if (errors && errors.length > 0) {
    var _errors$reduce = errors.reduce(function (categories, error) {
      var _error$extensions;

      if (((_error$extensions = error.extensions) == null ? void 0 : _error$extensions.code) === 'UNAUTHENTICATED') {
        categories.unauthenticated.push(error);
      } else {
        categories.otherErrors.push(error);
      }

      return categories;
    }, {
      unauthenticated: [],
      otherErrors: []
    }),
        unauthenticated = _errors$reduce.unauthenticated,
        otherErrors = _errors$reduce.otherErrors;

    unauthenticated.forEach(function (error) {
      if (error.message.indexOf('x-nacelle-space-token') > -1 || error.message.indexOf('Token is invalid') > -1) {
        errorMessage += " The Storefront SDK client is trying to use an invalid Storefront API token, " + connectorParams.token + ", for " + connectorParams.endpoint + ".\nPlease verify that the client is initialized with the correct token parameter.'";
      }
    });
    otherErrors.forEach(function (error, index, arr) {
      var _ref = error.extensions || {},
          nacelleErrorId = _ref.nacelleErrorId;

      var displayIndex = arr.length > 1 ? " (" + (index + 1) + " of " + arr.length + ") " : '';
      var displayErrorId = nacelleErrorId ? " (Error Ref Id: " + nacelleErrorId + ")" : '';
      errorMessage += "" + displayIndex + error.message + displayErrorId;
    });

    if (connectorParams.debugMode) {
      console.info('Storefront SDK Debug: GraphQL Error Details', JSON.stringify(errors));
    }

    throw new Error(errorMessage);
  }
};

function nodesFromEdges(edges) {
  return edges ? edges.map(function (_ref) {
    var node = _ref.node;
    return node;
  }) : [];
}
function lastEdgeCursor(edges) {
  return edges && edges.length > 0 ? edges[edges.length - 1].cursor : undefined;
}
function mapCollectionConnectionToArray(collection, connectionKey, placementKey) {
  var _extends2;

  var connection = collection[connectionKey];
  return _extends({}, collection, (_extends2 = {}, _extends2[placementKey] = nodesFromEdges(connection.edges), _extends2));
}

function checkDeprecatedQuery(params) {
  return Boolean(params && typeof params.startAfterEntryId !== 'undefined' && params.startAfterEntryId.length > 0);
}

var _excluded = ["cursor", "startAfterEntryId", "nacelleEntryIds", "handles", "locale", "maxReturnedEntries", "advancedOptions", "edgesToNodes"];

var StorefrontConnector = /*#__PURE__*/function () {
  function StorefrontConnector(params) {
    this.token = void 0;
    this.endpoint = void 0;
    this.locale = void 0;
    this.httpClient = void 0;
    this.debugMode = void 0;
    this.endpoint = params.endpoint;
    this.token = params.token;
    this.locale = params.locale;
    this.debugMode = params.debugMode || false;

    if (this.debugMode) {
      console.info('credentials:', {
        endpoint: this.endpoint,
        token: this.token
      });
    }

    this.httpClient = params.httpClient || new HttpClientFetch({
      headers: {
        'x-nacelle-space-token': this.token
      }
    });
  } // TODO: clean up this method. too much branching logic


  var _proto = StorefrontConnector.prototype;

  _proto.request =
  /*#__PURE__*/
  function () {
    var _request = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {
      var query, queryName, variables, data, response, graphqlResponse, queryResponseData, _queryResponseData;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              query = params.query, queryName = params.queryName, variables = params.variables;
              data = {
                query: query,
                variables: variables
              };

              if (this.debugMode) {
                console.info('storefront request', {
                  query: JSON.stringify(query),
                  variables: JSON.stringify(variables)
                });
              }

              _context.next = 6;
              return this.httpClient.post(this.endpoint, data);

            case 6:
              response = _context.sent;

              if (!response) {
                _context.next = 18;
                break;
              }

              graphqlResponse = response.data;

              if (isGraphQLError(graphqlResponse)) {
                handleGraphqlErrors(this, graphqlResponse.errors);
              }

              if (!graphqlResponse.data) {
                _context.next = 17;
                break;
              }

              if (!(queryName && graphqlResponse.data[queryName] !== 'undefined')) {
                _context.next = 14;
                break;
              }

              queryResponseData = graphqlResponse.data[queryName];
              return _context.abrupt("return", {
                success: true,
                data: queryResponseData
              });

            case 14:
              if (queryName) {
                _context.next = 17;
                break;
              }

              _queryResponseData = graphqlResponse.data;
              return _context.abrupt("return", {
                success: true,
                data: _queryResponseData
              });

            case 17:
              throw new Error("Response did not include " + queryName + ".\n          " + JSON.stringify(graphqlResponse, null, 2));

            case 18:
              throw new Error("No valid response from " + queryName);

            case 21:
              _context.prev = 21;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", {
                success: false,
                error: _context.t0.message,
                data: null
              });

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 21]]);
    }));

    function request(_x) {
      return _request.apply(this, arguments);
    }

    return request;
  }();

  _proto.requestCollectionEntries = /*#__PURE__*/function () {
    var _requestCollectionEntries = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
      var params, query, queryName, key, cursor, collectionEntryId, handle, startAfterEntryId, _params$maxReturnedEn, maxReturnedEntries, locale, advancedOptions, _params$edgesToNodes, edgesToNodes, isDeprecatedQuery, entriesFirst, entriesAfter, allEntries, keepFetching, response, collection, entries, edges, _collection, _entries, pageInfo, collectionEdges, hasNextPage, items;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              params = options.params, query = options.query, queryName = options.queryName, key = options.key;
              cursor = params.cursor, collectionEntryId = params.collectionEntryId, handle = params.handle, startAfterEntryId = params.startAfterEntryId, _params$maxReturnedEn = params.maxReturnedEntries, maxReturnedEntries = _params$maxReturnedEn === void 0 ? DEFAULT_MAX_ENTRIES_PER_COLLECTION : _params$maxReturnedEn, locale = params.locale, advancedOptions = params.advancedOptions, _params$edgesToNodes = params.edgesToNodes, edgesToNodes = _params$edgesToNodes === void 0 ? true : _params$edgesToNodes;

              if (collectionEntryId && handle) {
                console.warn('You have supplied both a collectionEntryId and handle. This method will use collectionEntryId for querying.');
              }

              if (!(!collectionEntryId && !handle)) {
                _context2.next = 5;
                break;
              }

              throw new Error('You must provide either a collectionEntryId or handle.');

            case 5:
              isDeprecatedQuery = checkDeprecatedQuery(params);

              if (isDeprecatedQuery) {
                console.warn("You are using the parameter, startAfterEntryId, for a deprecated \nStorefront API query, " + queryName + ". This method and query will still return \nresults, but you will have better improved results and pagination support \nusing the parameter, cursor, instead.");
              }

              entriesFirst = Math.min.apply(Math, [(advancedOptions == null ? void 0 : advancedOptions.entriesPerPage) || DEFAULT_MAX_ENTRIES_PER_COLLECTION, maxReturnedEntries].filter(function (v) {
                return v > 0;
              }));
              entriesAfter = isDeprecatedQuery ? startAfterEntryId : cursor;
              allEntries = [];
              keepFetching = false;

            case 11:
              _context2.next = 13;
              return this.request({
                query: query,
                queryName: queryName,
                variables: _extends({
                  filter: _extends({}, collectionEntryId && {
                    nacelleEntryIds: [collectionEntryId]
                  }, !collectionEntryId && handle ? {
                    handles: [handle]
                  } : {}, locale ? {
                    locale: locale
                  } : {
                    locale: this.locale
                  }),
                  entriesFirst: entriesFirst
                }, entriesAfter && {
                  entriesAfter: entriesAfter
                })
              });

            case 13:
              response = _context2.sent;

              if (!(response.success && response.data)) {
                _context2.next = 18;
                break;
              }

              if (isDeprecatedQuery) {
                collection = response.data[0];
                entries = collection[key];

                if (entries) {
                  allEntries = allEntries.concat(entries);
                  entriesAfter = entries.length > 0 ? entries[entries.length - 1].nacelleEntryId : undefined;
                  keepFetching = keepFetchingItems(entries, allEntries, maxReturnedEntries);
                }
              } else {
                edges = response.data.edges;

                if (edges.length === 0) {
                  console.warn('No collections matching query');
                } else {
                  _collection = nodesFromEdges(edges)[0];
                  _entries = _collection[key];

                  if (_entries) {
                    pageInfo = _entries.pageInfo, collectionEdges = _entries.edges;
                    hasNextPage = pageInfo.hasNextPage;
                    items = edgesToNodes ? nodesFromEdges(collectionEdges) : collectionEdges;
                    allEntries = allEntries.concat(items);
                    entriesAfter = lastEdgeCursor(collectionEdges);
                    keepFetching = keepFetchingItemsUsingNextPage(hasNextPage, allEntries, maxReturnedEntries);
                  }
                }
              }

              _context2.next = 19;
              break;

            case 18:
              throw new Error(response.error);

            case 19:
              if (keepFetching) {
                _context2.next = 11;
                break;
              }

            case 20:
              return _context2.abrupt("return", allEntries);

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function requestCollectionEntries(_x2) {
      return _requestCollectionEntries.apply(this, arguments);
    }

    return requestCollectionEntries;
  }()
  /**
   * @description This is a helper method for fetching either pages of entries of
   * a given entry type or fetching entries by id or handles.
   * @param query The query to perform
   * @param queryName The query operation name
   * @param params method parameters that will be transformed into Storefront GraphQL
   * query variables.
   * @returns A promise for an array of type T
   */
  ;

  _proto.requestEntries =
  /*#__PURE__*/
  function () {
    var _requestEntries = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, queryName, params) {
      var _ref, cursor, startAfterEntryId, nacelleEntryIds, handles, locale, _ref$maxReturnedEntri, maxReturnedEntries, advancedOptions, _ref$edgesToNodes, edgesToNodes, addlParams, _ref2, _ref2$maxReturnedEntr, maxReturnedEntriesPerCollection, isCollectionQuery, isDeprecatedQuery, nextAfter, keepFetching, allEntries, filterArgs, chunk, i, j, tempIds, tempHandles, response, entries, edges, _entries2, _response, _entries3, _response$data, pageInfo, _edges, hasNextPage, _entries4;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _ref = params || {}, cursor = _ref.cursor, startAfterEntryId = _ref.startAfterEntryId, nacelleEntryIds = _ref.nacelleEntryIds, handles = _ref.handles, locale = _ref.locale, _ref$maxReturnedEntri = _ref.maxReturnedEntries, maxReturnedEntries = _ref$maxReturnedEntri === void 0 ? DEFAULT_MAX_ENTRIES : _ref$maxReturnedEntri, advancedOptions = _ref.advancedOptions, _ref$edgesToNodes = _ref.edgesToNodes, edgesToNodes = _ref$edgesToNodes === void 0 ? true : _ref$edgesToNodes, addlParams = _objectWithoutPropertiesLoose(_ref, _excluded);
              _ref2 = params || {}, _ref2$maxReturnedEntr = _ref2.maxReturnedEntriesPerCollection, maxReturnedEntriesPerCollection = _ref2$maxReturnedEntr === void 0 ? DEFAULT_MAX_ENTRIES_PER_COLLECTION : _ref2$maxReturnedEntr;
              isCollectionQuery = ['productCollections', 'contentCollections', 'allProductCollections', 'allContentCollections'].includes(queryName);
              isDeprecatedQuery = checkDeprecatedQuery(params);

              if (isDeprecatedQuery) {
                console.warn("You are using the parameter, startAfterEntryId, for a deprecated \nStorefront API query, " + queryName + ". This method and query will still return \nresults, but you will have better improved results and pagination support \nusing the parameter, cursor, instead.");
              }

              if (addlParams.maxReturnedEntriesPerCollection) {
                delete addlParams.maxReturnedEntriesPerCollection;
              }

              nextAfter = isDeprecatedQuery ? startAfterEntryId : cursor;
              keepFetching = true;
              allEntries = [];
              filterArgs = _extends({
                first: Math.min.apply(Math, [(advancedOptions == null ? void 0 : advancedOptions.entriesPerPage) || DEFAULT_PAGE_FETCH_LIMIT, maxReturnedEntries].filter(function (v) {
                  return v > 0;
                })),
                after: nextAfter
              }, locale ? {
                locale: locale
              } : {
                locale: this.locale
              }, addlParams); // TODO: refactor this entire method into smaller manageable methods.

              if (!(handles || nacelleEntryIds)) {
                _context3.next = 30;
                break;
              }

              if (nacelleEntryIds && handles) {
                console.warn('You have supplied both a nacelleEntryIds and handles. This method will use nacelleEntryIds for querying.');
              }

              chunk = (advancedOptions == null ? void 0 : advancedOptions.entriesPerPage) || (nacelleEntryIds == null ? void 0 : nacelleEntryIds.length) || (handles == null ? void 0 : handles.length) || DEFAULT_PAGE_FETCH_LIMIT;
              i = 0, j = (nacelleEntryIds || handles || []).length;

            case 14:
              if (!(i < j && (maxReturnedEntries > 0 ? allEntries.length < maxReturnedEntries : true))) {
                _context3.next = 28;
                break;
              }

              tempIds = (nacelleEntryIds || []).slice(i, i + chunk);
              tempHandles = tempIds.length === 0 ? (handles || []).slice(i, i + chunk) : [];
              _context3.next = 19;
              return this.request({
                query: query,
                queryName: queryName,
                variables: _extends({
                  filter: _extends({}, filterArgs, tempIds.length > 0 ? {
                    nacelleEntryIds: tempIds
                  } : {}, tempHandles.length > 0 ? {
                    handles: tempHandles
                  } : {})
                }, isCollectionQuery && {
                  maxReturnedEntriesPerCollection: maxReturnedEntriesPerCollection
                })
              });

            case 19:
              response = _context3.sent;

              if (!(response.success && response.data)) {
                _context3.next = 24;
                break;
              }

              if (isDeprecatedQuery) {
                entries = response.data;
                allEntries = allEntries.concat(entries);
              } else {
                edges = response.data.edges;
                _entries2 = edgesToNodes ? nodesFromEdges(edges) : edges;
                allEntries = allEntries.concat(_entries2);
              }

              _context3.next = 25;
              break;

            case 24:
              throw new Error(response.error);

            case 25:
              i += chunk;
              _context3.next = 14;
              break;

            case 28:
              _context3.next = 39;
              break;

            case 30:
              _context3.next = 32;
              return this.request({
                query: query,
                queryName: queryName,
                variables: _extends({
                  filter: _extends({}, filterArgs, {
                    after: nextAfter
                  })
                }, isCollectionQuery && {
                  maxReturnedEntriesPerCollection: maxReturnedEntriesPerCollection
                })
              });

            case 32:
              _response = _context3.sent;

              if (!(_response.success && _response.data)) {
                _context3.next = 37;
                break;
              }

              if (isDeprecatedQuery) {
                _entries3 = _response.data;
                allEntries = allEntries.concat(_entries3);
                nextAfter = _entries3.length > 0 ? _entries3[_entries3.length - 1].nacelleEntryId : undefined;
                keepFetching = keepFetchingItems(_entries3, allEntries, maxReturnedEntries);
              } else {
                _response$data = _response.data, pageInfo = _response$data.pageInfo, _edges = _response$data.edges;
                hasNextPage = pageInfo.hasNextPage;
                _entries4 = edgesToNodes ? nodesFromEdges(_edges) : _edges;
                allEntries = allEntries.concat(_entries4);
                nextAfter = lastEdgeCursor(_edges);
                keepFetching = keepFetchingItemsUsingNextPage(hasNextPage, allEntries, maxReturnedEntries);
              }

              _context3.next = 38;
              break;

            case 37:
              throw new Error(_response.error);

            case 38:
              if (keepFetching) {
                _context3.next = 30;
                break;
              }

            case 39:
              return _context3.abrupt("return", maxReturnedEntries > -1 ? allEntries.slice(0, maxReturnedEntries) : allEntries);

            case 40:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function requestEntries(_x3, _x4, _x5) {
      return _requestEntries.apply(this, arguments);
    }

    return requestEntries;
  }();

  _proto.products = /*#__PURE__*/function () {
    var _products = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {
      var isDeprecatedQuery, query, queryName, products;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? productsQuery : allProductsQuery;
              queryName = isDeprecatedQuery ? 'products' : 'allProducts';
              _context4.next = 5;
              return this.requestEntries(query, queryName, params);

            case 5:
              products = _context4.sent;
              return _context4.abrupt("return", products);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function products(_x6) {
      return _products.apply(this, arguments);
    }

    return products;
  }();

  _proto.productCollections = /*#__PURE__*/function () {
    var _productCollections = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {
      var _ref3, _ref3$edgesToNodes, edgesToNodes, isDeprecatedQuery, query, queryName, collections;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _ref3 = params || {}, _ref3$edgesToNodes = _ref3.edgesToNodes, edgesToNodes = _ref3$edgesToNodes === void 0 ? true : _ref3$edgesToNodes;
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? productCollectionsQuery : allProductCollectionsQuery;
              queryName = isDeprecatedQuery ? 'productCollections' : 'allProductCollections';
              _context5.next = 6;
              return this.requestEntries(query, queryName, params);

            case 6:
              collections = _context5.sent;

              if (!isDeprecatedQuery) {
                _context5.next = 9;
                break;
              }

              return _context5.abrupt("return", collections);

            case 9:
              if (!edgesToNodes) {
                _context5.next = 11;
                break;
              }

              return _context5.abrupt("return", collections.map(function (collection) {
                return mapCollectionConnectionToArray(collection, 'productConnection', 'products');
              }));

            case 11:
              return _context5.abrupt("return", collections.map(function (edge) {
                return _extends({}, edge, {
                  node: mapCollectionConnectionToArray(edge.node, 'productConnection', 'products')
                });
              }));

            case 12:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function productCollections(_x7) {
      return _productCollections.apply(this, arguments);
    }

    return productCollections;
  }();

  _proto.content = /*#__PURE__*/function () {
    var _content = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {
      var isDeprecatedQuery, query, queryName, content;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? contentQuery : allContentQuery;
              queryName = isDeprecatedQuery ? 'content' : 'allContent';
              _context6.next = 5;
              return this.requestEntries(query, queryName, params);

            case 5:
              content = _context6.sent;
              return _context6.abrupt("return", content);

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function content(_x8) {
      return _content.apply(this, arguments);
    }

    return content;
  }();

  _proto.contentCollections = /*#__PURE__*/function () {
    var _contentCollections = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(params) {
      var _ref4, _ref4$edgesToNodes, edgesToNodes, isDeprecatedQuery, query, queryName, collections;

      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _ref4 = params || {}, _ref4$edgesToNodes = _ref4.edgesToNodes, edgesToNodes = _ref4$edgesToNodes === void 0 ? true : _ref4$edgesToNodes;
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? contentCollectionsQuery : allContentCollectionsQuery;
              queryName = isDeprecatedQuery ? 'contentCollections' : 'allContentCollections';
              _context7.next = 6;
              return this.requestEntries(query, queryName, params);

            case 6:
              collections = _context7.sent;

              if (!isDeprecatedQuery) {
                _context7.next = 9;
                break;
              }

              return _context7.abrupt("return", collections);

            case 9:
              if (!edgesToNodes) {
                _context7.next = 11;
                break;
              }

              return _context7.abrupt("return", collections.map(function (collection) {
                return mapCollectionConnectionToArray(collection, 'contentConnection', 'entries');
              }));

            case 11:
              return _context7.abrupt("return", collections.map(function (edge) {
                return _extends({}, edge, {
                  node: mapCollectionConnectionToArray(edge.node, 'contentConnection', 'entries')
                });
              }));

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function contentCollections(_x9) {
      return _contentCollections.apply(this, arguments);
    }

    return contentCollections;
  }();

  _proto.navigation = /*#__PURE__*/function () {
    var _navigation2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {
      var requestParams, response;
      return _regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              requestParams = {
                query: navigation,
                queryName: 'navigation'
              };

              if (params) {
                requestParams.variables = {
                  filter: params
                };
              }

              _context8.next = 4;
              return this.request(requestParams);

            case 4:
              response = _context8.sent;

              if (!(response.success && response.data)) {
                _context8.next = 7;
                break;
              }

              return _context8.abrupt("return", response.data);

            case 7:
              throw new Error(response.error);

            case 8:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function navigation$1(_x10) {
      return _navigation2.apply(this, arguments);
    }

    return navigation$1;
  }();

  _proto.query = /*#__PURE__*/function () {
    var _query = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {
      var query, variables, response;
      return _regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              query = params.query, variables = params.variables;
              _context9.next = 3;
              return this.request({
                query: query,
                variables: variables
              });

            case 3:
              response = _context9.sent;

              if (!(response.success && response.data)) {
                _context9.next = 6;
                break;
              }

              return _context9.abrupt("return", response.data);

            case 6:
              throw new Error(response.error);

            case 7:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function query(_x11) {
      return _query.apply(this, arguments);
    }

    return query;
  }();

  _proto.spaceProperties = /*#__PURE__*/function () {
    var _spaceProperties2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
      var response;
      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.request({
                query: spaceQuery,
                queryName: 'spaceProperties'
              });

            case 2:
              response = _context10.sent;

              if (!(response.success && response.data)) {
                _context10.next = 5;
                break;
              }

              return _context10.abrupt("return", response.data);

            case 5:
              throw new Error(response.error);

            case 6:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function spaceProperties() {
      return _spaceProperties2.apply(this, arguments);
    }

    return spaceProperties;
  }();

  _proto.productCollectionEntries = /*#__PURE__*/function () {
    var _productCollectionEntries = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(params) {
      var isDeprecatedQuery, query, queryName, key;
      return _regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? productCollectionEntriesQuery : allProductCollectionEntriesQuery;
              queryName = isDeprecatedQuery ? 'productCollections' : 'allProductCollections';
              key = isDeprecatedQuery ? 'products' : 'productConnection';
              return _context11.abrupt("return", this.requestCollectionEntries({
                query: query,
                queryName: queryName,
                key: key,
                params: params
              }));

            case 5:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function productCollectionEntries(_x12) {
      return _productCollectionEntries.apply(this, arguments);
    }

    return productCollectionEntries;
  }();

  _proto.contentCollectionEntries = /*#__PURE__*/function () {
    var _contentCollectionEntries = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(params) {
      var isDeprecatedQuery, query, queryName, key;
      return _regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              isDeprecatedQuery = checkDeprecatedQuery(params);
              query = isDeprecatedQuery ? contentCollectionEntriesQuery : allContentCollectionEntriesQuery;
              queryName = isDeprecatedQuery ? 'contentCollections' : 'allContentCollections';
              key = isDeprecatedQuery ? 'entries' : 'contentConnection';
              return _context12.abrupt("return", this.requestCollectionEntries({
                query: query,
                queryName: queryName,
                key: key,
                params: params
              }));

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function contentCollectionEntries(_x13) {
      return _contentCollectionEntries.apply(this, arguments);
    }

    return contentCollectionEntries;
  }();

  return StorefrontConnector;
}();

var SubscriptionConnector = function SubscriptionConnector(params) {
  var _this = this;

  this.token = void 0;
  this.endpoint = void 0;
  this.wsClient = void 0;
  this.debugMode = void 0;

  this.subscribeToProductUpdate = function (observable, nacelleEntryIds) {
    if (!_this.wsClient) {
      throw new Error('No wsClient');
    }

    try {
      var _pipe = wonka.pipe(_this.wsClient.subscription(productSubscription, {
        productInventoryUpdatedFilter: {
          nacelleEntryIds: nacelleEntryIds
        }
      }), wonka.subscribe(function (result) {
        if (result.error) {
          observable.onError(result);
        } else {
          observable.onNext(result);
        }
      })),
          unsubscribe = _pipe.unsubscribe;

      return unsubscribe;
    } catch (err) {
      observable.onError(err); // eslint-disable-next-line @typescript-eslint/no-empty-function

      return function () {};
    }
  };

  this.subscribeToProductVariantUpdate = function (observable, nacelleEntryIds) {
    if (!_this.wsClient) {
      throw new Error('No wsClient');
    }

    try {
      var _pipe2 = wonka.pipe(_this.wsClient.subscription(productVariantSubscription, {
        variantInventoryUpdatedFilter: {
          nacelleEntryIds: nacelleEntryIds
        }
      }), wonka.subscribe(function (result) {
        if (result.error) {
          observable.onError(result);
        } else {
          observable.onNext(result);
        }
      })),
          unsubscribe = _pipe2.unsubscribe;

      return unsubscribe;
    } catch (err) {
      observable.onError(err); // eslint-disable-next-line @typescript-eslint/no-empty-function

      return function () {};
    }
  };

  this.endpoint = params.endpoint;
  this.token = params.token;
  this.debugMode = params.debugMode || false;

  if (this.debugMode) {
    console.info('credentials:', {
      endpoint: this.endpoint,
      token: this.token
    });
  }

  var headers = {
    'x-nacelle-tether-access-token': this.token
  };
  var subscriptionClient = graphqlWs.createClient({
    url: this.endpoint,
    connectionParams: headers,
    isFatalConnectionProblem: function isFatalConnectionProblem(errOrCloseEvent) {
      var typeObj = errOrCloseEvent;

      if (typeObj.code === 4403) {
        console.error('Websocket server rejecting auth, check headers for correct x-nacelle-space-id and x-nacelle-tether-access-token');
        return true;
      }

      return false;
    }
  });
  this.wsClient = params.wsClient || core.createClient({
    url: this.endpoint,
    exchanges: [].concat(core.defaultExchanges, [core.subscriptionExchange({
      forwardSubscription: function forwardSubscription(operation) {
        return {
          subscribe: function subscribe(sink) {
            var dispose = subscriptionClient.subscribe(operation, sink);
            return {
              unsubscribe: dispose
            };
          }
        };
      }
    })])
  });
};

function Storefront(params) {
  if (typeof params.token === 'undefined' || params.token.length === 0) {
    throw new Error('Nacelle space token is required.');
  }

  if (typeof params.storefrontEndpoint === 'undefined' || params.storefrontEndpoint.length === 0) {
    throw new Error('Nacelle endpoint is required');
  }

  var locale = params.locale || 'en-US';
  var debugMode = typeof params.debugMode !== 'undefined' ? params.debugMode : false;

  if (debugMode) {
    console.info("\uD83D\uDE4C  Storefront Debug Mode Unlocked! \uD83D\uDE4C");
  }

  var connector = params.connector || new StorefrontConnector({
    token: params.token,
    endpoint: params.storefrontEndpoint,
    locale: locale,
    debugMode: debugMode
  });
  var subscriptionConnector = undefined;

  if (params.subscriptionToken && params.subscriptionEndpoint) {
    subscriptionConnector = new SubscriptionConnector({
      token: params.subscriptionToken || '',
      endpoint: params.subscriptionEndpoint || '',
      debugMode: debugMode
    });
  }

  var currencyCode = params.currencyCode || 'USD';
  var onDataError = params.onDataError || null;
  var afterSubscriptions = [];

  function applyAfter(_x, _x2) {
    return _applyAfter.apply(this, arguments);
  }

  function _applyAfter() {
    _applyAfter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(method, responseObj) {
      var response, subs, _iterator, _step, sub;

      return _regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              response = responseObj;
              subs = afterSubscriptions.filter(function (sub) {
                return sub.method === method;
              });
              _iterator = _createForOfIteratorHelperLoose(subs);

            case 3:
              if ((_step = _iterator()).done) {
                _context10.next = 10;
                break;
              }

              sub = _step.value;
              _context10.next = 7;
              return sub.callback(response);

            case 7:
              response = _context10.sent;

            case 8:
              _context10.next = 3;
              break;

            case 10:
              return _context10.abrupt("return", response);

            case 11:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));
    return _applyAfter.apply(this, arguments);
  }

  return {
    getConfig: function getConfig() {
      return {
        token: params.token,
        storefrontEndpoint: params.storefrontEndpoint,
        locale: locale,
        currencyCode: currencyCode,
        afterSubscriptions: afterSubscriptions
      };
    },
    products: function () {
      var _products = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(productsParams) {
        var _products2;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return connector.products(productsParams);

              case 3:
                _products2 = _context.sent;
                return _context.abrupt("return", applyAfter('products', _products2));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);

                if (!onDataError) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", onDataError({
                  method: 'products',
                  params: productsParams || null,
                  error: _context.t0
                }));

              case 11:
                throw _context.t0;

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      function products(_x3) {
        return _products.apply(this, arguments);
      }

      return products;
    }(),
    productCollections: function () {
      var _productCollections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(productCollectionsParams) {
        var _productCollections2;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                console.info('storefront client, productCollections');
                _context2.prev = 1;
                _context2.next = 4;
                return connector.productCollections(productCollectionsParams);

              case 4:
                _productCollections2 = _context2.sent;
                return _context2.abrupt("return", applyAfter('productCollections', _productCollections2));

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](1);

                if (!onDataError) {
                  _context2.next = 12;
                  break;
                }

                return _context2.abrupt("return", onDataError({
                  method: 'productCollections',
                  params: productCollectionsParams || null,
                  error: _context2.t0
                }));

              case 12:
                throw _context2.t0;

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 8]]);
      }));

      function productCollections(_x4) {
        return _productCollections.apply(this, arguments);
      }

      return productCollections;
    }(),
    productCollectionEntries: function () {
      var _productCollectionEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(collectionEntriesParams) {
        var products;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                console.info('storefront client, productCollectionEntries');
                _context3.prev = 1;
                _context3.next = 4;
                return connector.productCollectionEntries(collectionEntriesParams);

              case 4:
                products = _context3.sent;
                return _context3.abrupt("return", applyAfter('productCollectionEntries', products));

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3["catch"](1);

                if (!onDataError) {
                  _context3.next = 12;
                  break;
                }

                return _context3.abrupt("return", onDataError({
                  method: 'productCollectionEntries',
                  params: collectionEntriesParams || null,
                  error: _context3.t0
                }));

              case 12:
                throw _context3.t0;

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[1, 8]]);
      }));

      function productCollectionEntries(_x5) {
        return _productCollectionEntries.apply(this, arguments);
      }

      return productCollectionEntries;
    }(),
    contentCollectionEntries: function () {
      var _contentCollectionEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(collectionEntriesParams) {
        var entries;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                console.info('storefront client, contentCollectionEntries');
                _context4.prev = 1;
                _context4.next = 4;
                return connector.contentCollectionEntries(collectionEntriesParams);

              case 4:
                entries = _context4.sent;
                return _context4.abrupt("return", applyAfter('contentCollectionEntries', entries));

              case 8:
                _context4.prev = 8;
                _context4.t0 = _context4["catch"](1);

                if (!onDataError) {
                  _context4.next = 12;
                  break;
                }

                return _context4.abrupt("return", onDataError({
                  method: 'contentCollectionEntries',
                  params: collectionEntriesParams || null,
                  error: _context4.t0
                }));

              case 12:
                throw _context4.t0;

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[1, 8]]);
      }));

      function contentCollectionEntries(_x6) {
        return _contentCollectionEntries.apply(this, arguments);
      }

      return contentCollectionEntries;
    }(),
    content: function () {
      var _content = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(contentParams) {
        var _content2;

        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return connector.content(contentParams);

              case 3:
                _content2 = _context5.sent;
                return _context5.abrupt("return", applyAfter('content', _content2));

              case 7:
                _context5.prev = 7;
                _context5.t0 = _context5["catch"](0);

                if (!onDataError) {
                  _context5.next = 11;
                  break;
                }

                return _context5.abrupt("return", onDataError({
                  method: 'content',
                  params: contentParams || null,
                  error: _context5.t0
                }));

              case 11:
                throw _context5.t0;

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[0, 7]]);
      }));

      function content(_x7) {
        return _content.apply(this, arguments);
      }

      return content;
    }(),
    contentCollections: function () {
      var _contentCollections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(contentCollectionsParams) {
        var _contentCollections2;

        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                _context6.next = 3;
                return connector.contentCollections(contentCollectionsParams);

              case 3:
                _contentCollections2 = _context6.sent;
                return _context6.abrupt("return", applyAfter('contentCollections', _contentCollections2));

              case 7:
                _context6.prev = 7;
                _context6.t0 = _context6["catch"](0);

                if (!onDataError) {
                  _context6.next = 11;
                  break;
                }

                return _context6.abrupt("return", onDataError({
                  method: 'contentCollections',
                  params: contentCollectionsParams || null,
                  error: _context6.t0
                }));

              case 11:
                throw _context6.t0;

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, null, [[0, 7]]);
      }));

      function contentCollections(_x8) {
        return _contentCollections.apply(this, arguments);
      }

      return contentCollections;
    }(),
    productSubscription: function productSubscription(observable, nacelleEntryIds) {
      var _subscriptionConnecto;

      if (!subscriptionConnector) {
        var msg = 'The params subscriptionToken && subscriptionEndpoint were not all provided';
        throw Error(msg);
      }

      return (_subscriptionConnecto = subscriptionConnector) == null ? void 0 : _subscriptionConnecto.subscribeToProductUpdate(observable, nacelleEntryIds);
    },
    productVariantSubscription: function productVariantSubscription(observable, nacelleEntryIds) {
      var _subscriptionConnecto2;

      if (!subscriptionConnector) {
        var msg = 'The params subscriptionToken && subscriptionEndpoint were not all provided';
        throw Error(msg);
      }

      return (_subscriptionConnecto2 = subscriptionConnector) == null ? void 0 : _subscriptionConnecto2.subscribeToProductVariantUpdate(observable, nacelleEntryIds);
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    query: function () {
      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(queryParams) {
        var result;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                _context7.next = 3;
                return connector.query(queryParams);

              case 3:
                result = _context7.sent;
                return _context7.abrupt("return", applyAfter('query', result));

              case 7:
                _context7.prev = 7;
                _context7.t0 = _context7["catch"](0);

                if (!onDataError) {
                  _context7.next = 11;
                  break;
                }

                return _context7.abrupt("return", onDataError({
                  method: 'query',
                  params: queryParams,
                  error: _context7.t0
                }));

              case 11:
                throw _context7.t0;

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, null, [[0, 7]]);
      }));

      function query(_x9) {
        return _query.apply(this, arguments);
      }

      return query;
    }(),
    navigation: function () {
      var _navigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {
        var _navigation2;

        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return connector.navigation(params);

              case 3:
                _navigation2 = _context8.sent;
                return _context8.abrupt("return", applyAfter('navigation', _navigation2));

              case 7:
                _context8.prev = 7;
                _context8.t0 = _context8["catch"](0);

                if (!onDataError) {
                  _context8.next = 11;
                  break;
                }

                return _context8.abrupt("return", onDataError({
                  method: 'navigation',
                  params: params || null,
                  error: _context8.t0
                }));

              case 11:
                throw _context8.t0;

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, null, [[0, 7]]);
      }));

      function navigation(_x10) {
        return _navigation.apply(this, arguments);
      }

      return navigation;
    }(),
    spaceProperties: function () {
      var _spaceProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var _spaceProperties2;

        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.next = 3;
                return connector.spaceProperties();

              case 3:
                _spaceProperties2 = _context9.sent;
                return _context9.abrupt("return", applyAfter('spaceProperties', _spaceProperties2));

              case 7:
                _context9.prev = 7;
                _context9.t0 = _context9["catch"](0);

                if (!onDataError) {
                  _context9.next = 11;
                  break;
                }

                return _context9.abrupt("return", onDataError({
                  method: 'spaceProperties',
                  params: null,
                  error: _context9.t0
                }));

              case 11:
                throw _context9.t0;

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, null, [[0, 7]]);
      }));

      function spaceProperties() {
        return _spaceProperties.apply(this, arguments);
      }

      return spaceProperties;
    }(),
    after: function after(method, callback) {
      afterSubscriptions.push({
        method: method,
        callback: callback
      });
    }
  };
}

exports.EntryType = void 0;

(function (EntryType) {
  EntryType["PRODUCT"] = "product";
  EntryType["PRODUCT_CONTENT"] = "product-content";
  EntryType["VARIANT"] = "variant";
  EntryType["VARIANT_CONTENT"] = "variant-content";
  EntryType["CONTENT"] = "content";
  EntryType["CONTENT_COLLECTION"] = "content-collection";
  EntryType["PRODUCT_COLLECTION"] = "product-collection";
  EntryType["COLLECTION_CONTENT"] = "collection-content";
})(exports.EntryType || (exports.EntryType = {}));

exports.DataSourceName = void 0;

(function (DataSourceName) {
  DataSourceName["SHOPIFY"] = "shopify";
  DataSourceName["CONTENTFUL"] = "contentful";
  DataSourceName["SANITY"] = "sanity";
})(exports.DataSourceName || (exports.DataSourceName = {}));

/**
 * An enum with the common IETF language tags. We can
 * use a library for this in the future since there
 * are a lot and we don't want to manage this ourselves.
 * A quick search had a library, but it did not have types.
 * This list can be found here: https://gist.github.com/traysr/2001377
 */
exports.Locales = void 0;

(function (Locales) {
  Locales["en"] = "en";
  Locales["en_US"] = "en-US";
  Locales["en_GB"] = "en-GB";
  Locales["fr"] = "fr";
  Locales["de"] = "de";
  Locales["pl"] = "pl";
  Locales["nl"] = "nl";
  Locales["fi"] = "fi";
  Locales["sv"] = "sv";
  Locales["it"] = "it";
  Locales["es"] = "es";
  Locales["pt"] = "pt";
  Locales["ru"] = "ru";
  Locales["pt_BR"] = "pt-BR";
  Locales["es_MX"] = "es-MX";
  Locales["zh_CN"] = "zh-CN";
  Locales["zh_TW"] = "zh-TW";
  Locales["jp"] = "ja";
  Locales["ko"] = "ko";
})(exports.Locales || (exports.Locales = {}));

exports.Storefront = Storefront;
exports["default"] = Storefront;
//# sourceMappingURL=storefront-sdk.cjs.development.js.map
