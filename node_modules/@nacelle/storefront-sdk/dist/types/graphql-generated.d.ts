export declare type Maybe<T> = T | null | undefined;
export declare type InputMaybe<T> = T | null | undefined;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** A signed decimal number, which supports arbitrary precision and is serialized as a string. Example value: "29.99". */
    Decimal: any;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: any;
};
export declare type CollectionContent = Node & {
    /** [sys] Reference to collection by Nacelle ID. */
    collectionEntryId: Scalars['ID'];
    /** [source] The Unix timestamp in seconds when the collection content was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [source] The description for a collection. */
    description?: Maybe<Scalars['String']>;
    /** [source] The primary media for a collection. */
    featuredMedia?: Maybe<Media>;
    /** [source] Custom fields from a dynamic CMS source. */
    fields?: Maybe<Scalars['JSON']>;
    /** [sys] Reference to collection by handle. */
    handle?: Maybe<Scalars['String']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] The locale of product collection to be presented. [IETF language tag] (ie. en-US) */
    locale?: Maybe<Scalars['String']>;
    /** [source] List of metafields associated with the product collection. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] Specifies if the collection content has been published. */
    published?: Maybe<Scalars['Boolean']>;
    /** [source] The ID for the content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] The title for a collection. */
    title?: Maybe<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the collection content was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
};
/** Represents master pieces of content like a page, article, employee, press-release, etc. */
export declare type Content = Node & {
    /** [source] The Unix timestamp in seconds when the content was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [source] Stringified JSON representing custom fields from a dynamic CMS source. */
    fields?: Maybe<Scalars['JSON']>;
    /** [source] A human-friendly unique string for the content. */
    handle?: Maybe<Scalars['String']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] The locale of the content to be presented. [IETF language tag] (ie. en-US) */
    locale?: Maybe<Scalars['String']>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] Specifies if the content has been published. */
    published?: Maybe<Scalars['Boolean']>;
    /** [source] The ID for the content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] The title for the content. */
    title?: Maybe<Scalars['String']>;
    /** [source] The categorization for the content, often used for search and filter. */
    type?: Maybe<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the content was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
};
/** Represents a collection of content: articles for a blog, employees for an About Us page, press releases for a News page, etc. */
export declare type ContentCollection = Node & {
    /** [source] Localized content associated with the content collection. */
    content?: Maybe<CollectionContent>;
    /** [source] List of content entries with Relay-style pagination */
    contentConnection: ContentConnection;
    /** [source] The Unix timestamp in seconds when the content collection was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /**
     * [source] List of content entries for a given content collection.
     * @deprecated `contentConnection` should be used for paginated content queries.
     */
    entries: Array<Content>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] List of metafields associated with the content collection. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] The ID for the content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] List of tags that have been associated to the collection. */
    tags: Array<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the content collection was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
};
/** Represents a collection of content: articles for a blog, employees for an About Us page, press releases for a News page, etc. */
export declare type ContentCollectionContentConnectionArgs = {
    after?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
};
/** Represents a collection of content: articles for a blog, employees for an About Us page, press releases for a News page, etc. */
export declare type ContentCollectionEntriesArgs = {
    after?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
};
/** Result of a ContentCollection Query with pagination info */
export declare type ContentCollectionConnection = NodeConnection & {
    edges: Array<ContentCollectionEdge>;
    pageInfo: PageInfo;
};
/** Implementation of an Edge type for ContentCollection entries */
export declare type ContentCollectionEdge = NodeEdge & {
    cursor: Scalars['String'];
    node: ContentCollection;
};
/** Filter results for product collection */
export declare type ContentCollectionFilterInput = {
    /** Returns elements after a cursor nacelleEntryId */
    after?: InputMaybe<Scalars['String']>;
    /** Returns the first n collections of a query. Defaults to 100. */
    first?: InputMaybe<Scalars['Int']>;
    /** Filter content collection entries by entry handle. */
    handles?: InputMaybe<Array<Scalars['String']>>;
    /** Filter items based on locale. [IETF language tag] (ie. en-US) */
    locale?: InputMaybe<Scalars['String']>;
    /** Filter content collection entries by Nacelle entry id. */
    nacelleEntryIds?: InputMaybe<Array<Scalars['String']>>;
};
/** Result of a Content Query with pagination info */
export declare type ContentConnection = NodeConnection & {
    edges: Array<ContentEdge>;
    pageInfo: PageInfo;
};
/** Implementation of an Edge type for Content entries */
export declare type ContentEdge = NodeEdge & {
    cursor: Scalars['String'];
    node: Content;
};
/** Filter results for content */
export declare type ContentFilterInput = {
    /** Returns elements after a cursor nacelleEntryId */
    after?: InputMaybe<Scalars['String']>;
    /** Returns the first n content entries of a query. Defaults to 100. */
    first?: InputMaybe<Scalars['Int']>;
    /** Filter content entries by entry handle. Requires type filter or defaults to type of 'page'. */
    handles?: InputMaybe<Array<Scalars['String']>>;
    /** Filter items based on locale. [IETF language tag] (ie. en-US) */
    locale?: InputMaybe<Scalars['String']>;
    /** Filter content entries by Nacelle entry id. */
    nacelleEntryIds?: InputMaybe<Array<Scalars['String']>>;
    /** Filter content entries by content type (ie. 'article', 'page', etc.) */
    type?: InputMaybe<Scalars['String']>;
};
/** List of Content ids grouped for a specific purpose. */
export declare type ContentList = {
    ids: Array<Scalars['ID']>;
    listHandle?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
};
/** A piece of media that can represent an Image, 3dModel, or Video. */
export declare type Media = {
    altText?: Maybe<Scalars['String']>;
    id?: Maybe<Scalars['ID']>;
    mimeType?: Maybe<Scalars['String']>;
    src: Scalars['String'];
    thumbnailSrc?: Maybe<Scalars['String']>;
    type: Scalars['String'];
};
/** Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are comprised of keys, values */
export declare type Metafield = {
    id?: Maybe<Scalars['ID']>;
    key: Scalars['String'];
    namespace?: Maybe<Scalars['String']>;
    value: Scalars['String'];
};
export declare type Mutation = {
    root?: Maybe<Scalars['String']>;
};
/** The filter to apply, when selecting navigation items. */
export declare type NavigationFilterInput = {
    /** The navigation group to filter by */
    groupId?: InputMaybe<Scalars['String']>;
};
export declare type NavigationGroup = {
    /** The unique identifier of the navigation group */
    groupId: Scalars['String'];
    /** Items within a navigation group */
    items?: Maybe<Array<NavigationGroupItem>>;
    /** Navigation properties */
    properties?: Maybe<Array<NavigationPropertyItem>>;
    /** Displayable title of a navigation group */
    title?: Maybe<Scalars['String']>;
    /** Updated-at timestamp */
    updatedAt?: Maybe<Scalars['String']>;
    /** Updated-by user ID */
    updatedBy?: Maybe<Scalars['String']>;
};
export declare type NavigationGroupItem = {
    /** Navigation items */
    items?: Maybe<Array<NavigationGroupItem>>;
    /** Navigation media items */
    media?: Maybe<Array<NavigationMediaItem>>;
    /** Navigation properties */
    properties?: Maybe<Array<NavigationPropertyItem>>;
    /** Displayable title of a navigation item */
    title: Scalars['String'];
    /** Route to a navigation item */
    url: Scalars['String'];
};
export declare type NavigationMediaItem = {
    /** URL that links to the media item */
    url?: Maybe<Scalars['String']>;
};
export declare type NavigationPropertyItem = {
    key: Scalars['String'];
    value: Scalars['String'];
};
/** An entry with a Globally Unique ID */
export declare type Node = {
    /** The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
};
/** An object containing an array of Node data and pagination information */
export declare type NodeConnection = {
    edges: Array<NodeEdge>;
    pageInfo: PageInfo;
};
/** An object containing a node with Nacelle data and a cursor for pagination and filtering */
export declare type NodeEdge = {
    cursor: Scalars['String'];
    node: Node;
};
/** Pagination object indicating if there are more pages of data and where the next page starts. */
export declare type PageInfo = {
    endCursor: Scalars['String'];
    hasNextPage: Scalars['Boolean'];
    hasPreviousPage: Scalars['Boolean'];
    startCursor: Scalars['String'];
};
/** A price break definition. */
export declare type PriceBreak = {
    metafields: Array<Metafield>;
    price?: Maybe<Scalars['Decimal']>;
    quantityMax?: Maybe<Scalars['Int']>;
    quantityMin?: Maybe<Scalars['Int']>;
};
/** A price rule definition. */
export declare type PriceRule = {
    availableTo: Array<Scalars['String']>;
    comparedAtPrice?: Maybe<Scalars['Decimal']>;
    handle: Scalars['String'];
    id?: Maybe<Scalars['ID']>;
    metafields: Array<Metafield>;
    price: Scalars['Decimal'];
    priceBreaks: Array<PriceBreak>;
    priceCurrency: Scalars['String'];
    title: Scalars['String'];
};
/** A product represents an individual item for sale. Products are often physical, but they don't have to be. For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty). */
export declare type Product = Node & {
    /** [source] Specifies if at least one product variant is available for sale. */
    availableForSale?: Maybe<Scalars['Boolean']>;
    content?: Maybe<ProductContent>;
    /** [source] The Unix timestamp in seconds when the product was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] List of metafields associated with the product. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] The categorization for a product, often used for search and filter. */
    productType?: Maybe<Scalars['String']>;
    /** [source] The ID for the product from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] List of tags that have been associated to the product. */
    tags: Array<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the product was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
    /** [source] List of variants for the product. */
    variants: Array<Variant>;
    /** [source] Vendor name for product. */
    vendor?: Maybe<Scalars['String']>;
};
/** Represents a collection of products. */
export declare type ProductCollection = Node & {
    /** [source] Localized content associated with the product collection. */
    content?: Maybe<CollectionContent>;
    /** [source] The Unix timestamp in seconds when the product collection was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] List of metafields associated with the product collection. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] List of products entries with Relay-style pagination */
    productConnection: ProductConnection;
    /**
     * [source] List of products for a given product collection.
     * @deprecated `productConnection` should be used for paginated product queries.
     */
    products: Array<Product>;
    /** [source] The ID for the content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] List of tags that have been associated to the collection. */
    tags: Array<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the product collection was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
};
/** Represents a collection of products. */
export declare type ProductCollectionProductConnectionArgs = {
    after?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
};
/** Represents a collection of products. */
export declare type ProductCollectionProductsArgs = {
    after?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
};
/** Result of a Content Query with pagination info */
export declare type ProductCollectionConnection = NodeConnection & {
    edges: Array<ProductCollectionEdge>;
    pageInfo: PageInfo;
};
/** Implementation of an Edge type for Content entries */
export declare type ProductCollectionEdge = NodeEdge & {
    cursor: Scalars['String'];
    node: ProductCollection;
};
/** Filter results for product collection */
export declare type ProductCollectionFilterInput = {
    /** Returns elements after a cursor nacelleEntryId */
    after?: InputMaybe<Scalars['String']>;
    /** Returns the first n collections of a query. Defaults to 100. */
    first?: InputMaybe<Scalars['Int']>;
    /** Filter product collection entries by entry handle. */
    handles?: InputMaybe<Array<Scalars['String']>>;
    /** Filter items based on locale. [IETF language tag] (ie. en-US) */
    locale?: InputMaybe<Scalars['String']>;
    /** Filter product collection entries by Nacelle entry id. */
    nacelleEntryIds?: InputMaybe<Array<Scalars['String']>>;
    /** Filter content entries by content type (ie. 'article', 'page', etc.) */
    type?: InputMaybe<Scalars['String']>;
};
/** Result of a Content Query with pagination info */
export declare type ProductConnection = NodeConnection & {
    edges: Array<ProductEdge>;
    pageInfo: PageInfo;
    totalCount?: Maybe<Scalars['Int']>;
};
/** A piece of product content represents the localized version of data points, with more flexibility. */
export declare type ProductContent = Node & {
    /** [source] The Unix timestamp in seconds when the product content was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [source] The description for a product. */
    description?: Maybe<Scalars['String']>;
    /** [source] The primary media for a product. */
    featuredMedia?: Maybe<Media>;
    /** [source] Custom fields from a dynamic CMS source. */
    fields?: Maybe<Scalars['JSON']>;
    /** [sys] Reference to product by handle. */
    handle?: Maybe<Scalars['String']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] The locale of product content to be presented. [IETF language tag] (ie. en-US) */
    locale?: Maybe<Scalars['String']>;
    /** [source] List of media for a product */
    media: Array<Media>;
    /** [source] List of metafields associated with the product content. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] List of product options. */
    options: Array<ProductOption>;
    /** [sys] Reference to product by Nacelle ID. */
    productEntryId?: Maybe<Scalars['ID']>;
    /** [source] Specifies if the product content has been published. */
    published?: Maybe<Scalars['Boolean']>;
    /** [source] SEO fields for a product */
    seo?: Maybe<Seo>;
    /** [source] The ID for the product content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] The title for a product. */
    title?: Maybe<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the product content was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
};
/** Implementation of an Edge type for Product entries */
export declare type ProductEdge = NodeEdge & {
    cursor: Scalars['String'];
    node: Product;
};
/** Filter results for product */
export declare type ProductFilterInput = {
    /** Returns elements after a cursor nacelleEntryId */
    after?: InputMaybe<Scalars['String']>;
    /** Returns the first n products of a query. Defaults to 100. */
    first?: InputMaybe<Scalars['Int']>;
    /** Filter product entries by entry handle. */
    handles?: InputMaybe<Array<Scalars['String']>>;
    /** Filter items based on locale. [IETF language tag] (ie. en-US) */
    locale?: InputMaybe<Scalars['String']>;
    /** Filter product entries by Nacelle entry id. */
    nacelleEntryIds?: InputMaybe<Array<Scalars['String']>>;
};
/** List of Product ids grouped for a specific purpose. */
export declare type ProductList = {
    ids: Array<Scalars['ID']>;
    listHandle?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
};
/** Product property names like Size, Color, and Material that the customers can select. Variants are selected based on permutations of these options. */
export declare type ProductOption = {
    name: Scalars['String'];
    values: Array<Scalars['String']>;
};
export declare type Query = {
    /** Query a list of content entries with Relay-style pagination */
    allContent: ContentConnection;
    /** Query a list of content collection entries with Relay-style pagination */
    allContentCollections: ContentCollectionConnection;
    /** Query a list of ProductCollection entries with Relay-style pagination */
    allProductCollections: ProductCollectionConnection;
    /** Query a list of products entries with Relay-style pagination */
    allProducts: ProductConnection;
    /**
     * Query a list of content entries.
     * @deprecated `allContent` should be used for paginated content queries.
     */
    content: Array<Content>;
    /**
     * Query a collection of contents
     * @deprecated `allContentCollections` should be used for paginated content collection queries.
     */
    contentCollections: Array<ContentCollection>;
    /** Get navigation groups for a space */
    navigation: Array<NavigationGroup>;
    /**
     * Query a collection of products
     * @deprecated `allProductCollections` should be used for paginated product collection queries.
     */
    productCollections: Array<ProductCollection>;
    /**
     * Query a list of products.
     * @deprecated `allProducts` should be used for paginated product queries.
     */
    products: Array<Product>;
    root?: Maybe<Scalars['String']>;
    /** Space properties data for a space */
    spaceProperties: SpaceProperties;
};
export declare type QueryAllContentArgs = {
    filter?: InputMaybe<ContentFilterInput>;
};
export declare type QueryAllContentCollectionsArgs = {
    filter?: InputMaybe<ContentCollectionFilterInput>;
};
export declare type QueryAllProductCollectionsArgs = {
    filter?: InputMaybe<ProductCollectionFilterInput>;
};
export declare type QueryAllProductsArgs = {
    filter?: InputMaybe<ProductFilterInput>;
};
export declare type QueryContentArgs = {
    filter?: InputMaybe<ContentFilterInput>;
};
export declare type QueryContentCollectionsArgs = {
    filter?: InputMaybe<ContentCollectionFilterInput>;
};
export declare type QueryNavigationArgs = {
    filter?: InputMaybe<NavigationFilterInput>;
};
export declare type QueryProductCollectionsArgs = {
    filter?: InputMaybe<ProductCollectionFilterInput>;
};
export declare type QueryProductsArgs = {
    filter?: InputMaybe<ProductFilterInput>;
};
/** A simple response indicating that an indexing event was received. Processing will occur in the background. */
export declare type QueryResponse = {
    message: Scalars['String'];
};
/** A field used to provide SEO data for web crawlers */
export declare type Seo = {
    description: Scalars['String'];
    title: Scalars['String'];
};
/** Properties used by customers to select a product variant. Products can have multiple options, like different sizes or colors. */
export declare type SelectedOption = {
    label?: Maybe<Scalars['String']>;
    name: Scalars['String'];
    value: Scalars['String'];
};
export declare type SpaceProperties = {
    /** List of space properties grouped by namespace */
    properties?: Maybe<Array<Maybe<SpacePropertyNamespace>>>;
    /** Updated-at timestamp */
    updatedAt?: Maybe<Scalars['String']>;
    /** Updated-by user ID */
    updatedBy?: Maybe<Scalars['String']>;
};
export declare type SpacePropertyItem = {
    /** Property name */
    key: Scalars['String'];
    /** Property value */
    value: Scalars['String'];
};
export declare type SpacePropertyNamespace = {
    /** List of space properties items */
    items?: Maybe<Array<Maybe<SpacePropertyItem>>>;
    /** Namespace name */
    namespace?: Maybe<Scalars['String']>;
};
/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export declare type Variant = Node & {
    /** [source] Specifies if the variant is available for sale. */
    availableForSale?: Maybe<Scalars['Boolean']>;
    /** [source] The compare at price of the variant. This can be used to mark a variant as on sale. */
    compareAtPrice?: Maybe<Scalars['Decimal']>;
    /** [source] Localized content for the variant. */
    content?: Maybe<VariantContent>;
    /** [source] The Unix timestamp in seconds when the variant was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] List of metafields associated with the variant. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [source] The price of the variant. */
    price?: Maybe<Scalars['Decimal']>;
    /** [source] The currency of the variant price. */
    priceCurrency?: Maybe<Scalars['String']>;
    /** [source] List of pricing rules associated with the variant */
    priceRules: Array<PriceRule>;
    /** [sys] Reference to parent product by Nacelle ID. */
    productEntryId?: Maybe<Scalars['ID']>;
    /** [sys] Reference to parent product by handle. */
    productHandle?: Maybe<Scalars['String']>;
    /** [source] The total sellable quantity of the variant for online sales channels. */
    quantityAvailable?: Maybe<Scalars['Int']>;
    /** [source] The SKU (stock keeping unit) associated with the variant. */
    sku?: Maybe<Scalars['String']>;
    /** [source] The ID for the product variant from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] The Unix timestamp in seconds when the variant was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
    /** [source] The weight of the variant in the unit specified with weightUnit. */
    weight?: Maybe<Scalars['Float']>;
    /** [source] The unit of measurement for weight. */
    weightUnit?: Maybe<Scalars['String']>;
};
/** A piece of variant content represents the localized version of data points, with more flexibility. */
export declare type VariantContent = Node & {
    /** [source] The Unix timestamp in seconds when the variant content was created. */
    createdAt?: Maybe<Scalars['Int']>;
    /** [source] The description for a variant. */
    description?: Maybe<Scalars['String']>;
    /** [source] The primary media for a variant. */
    featuredMedia?: Maybe<Media>;
    /** [source] Custom fields from a dynamic CMS source. */
    fields?: Maybe<Scalars['JSON']>;
    /** [sys] Timestamp of when Nacelle last indexed this entry. */
    indexedAt?: Maybe<Scalars['Int']>;
    /** [source] The locale of variant content to be presented. [IETF language tag] (ie. en-US) */
    locale?: Maybe<Scalars['String']>;
    /** [source] List of media for a variant */
    media: Array<Media>;
    /** [source] List of metafields associated with the variant content. */
    metafields: Array<Metafield>;
    /** [sys] The Nacelle ID of the entry. */
    nacelleEntryId: Scalars['ID'];
    /** [sys] Reference to parent product by Nacelle ID. */
    productEntryId?: Maybe<Scalars['ID']>;
    /** [sys] Reference to parent product by handle. */
    productHandle?: Maybe<Scalars['String']>;
    /** [source] Specifies if the variant content has been published. */
    published?: Maybe<Scalars['Boolean']>;
    /** [source] List of product options applied to the variant. */
    selectedOptions: Array<SelectedOption>;
    /** [source] The ID for the variant content from its system of origin (i.e. Shopify). */
    sourceEntryId: Scalars['ID'];
    /** [source] The ID for the system of origin. */
    sourceId: Scalars['ID'];
    /** [source] Source url of variant swatch. */
    swatchSrc?: Maybe<Scalars['String']>;
    /** [source] The title for a variant. */
    title?: Maybe<Scalars['String']>;
    /** [source] The Unix timestamp in seconds when the variant content was last modified. */
    updatedAt?: Maybe<Scalars['Int']>;
    /** [sys] Reference to parent variant by Nacelle ID. */
    variantEntryId?: Maybe<Scalars['ID']>;
};
