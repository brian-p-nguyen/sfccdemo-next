import { OperationResult } from '@urql/core';
import { ContentCollection, Content, NavigationGroup, ProductCollection, Product, SpaceProperties, ContentEdge, ProductEdge, ProductCollectionEdge, ContentCollectionEdge } from '../types/graphql-generated';
import { FetchMethodParams, FetchCollectionMethodParams, FetchContentMethodParams, FetchCollectionEntriesMethodParams, NavigationParams, QueryParams } from '../types/parameters';
import StorefrontConnector from '../StorefrontConnector';
import { Observable } from '../SubscriptionConnector';
export interface StorefrontParams {
    token: string;
    storefrontEndpoint: string;
    currencyCode?: string;
    locale?: string;
    connector?: StorefrontConnector;
    onDataError?: OnDataError;
    debugMode?: boolean;
    subscriptionEndpoint?: string;
    subscriptionToken?: string;
    subscriptionSpaceId?: string;
}
export interface StorefrontConfig extends StorefrontParams {
    afterSubscriptions: AfterSubscription[];
}
export interface StorefrontInstance {
    after: (method: string, callback: <T>(responseObj: T) => Promise<T> | T) => void;
    content: (contentParams?: FetchContentMethodParams) => Promise<Array<Content | ContentEdge>>;
    contentCollections: (contentCollectionsParams?: FetchCollectionMethodParams) => Promise<Array<ContentCollection | ContentCollectionEdge>>;
    getConfig: () => StorefrontConfig;
    navigation: (params?: NavigationParams) => Promise<NavigationGroup[]>;
    products: (productsParams?: FetchMethodParams) => Promise<Array<Product | ProductEdge>>;
    productCollections: (productCollectionsParams?: FetchCollectionMethodParams) => Promise<Array<ProductCollection | ProductCollectionEdge>>;
    productCollectionEntries: (collectionEntriesParams: FetchCollectionEntriesMethodParams) => Promise<Array<Product | ProductEdge>>;
    contentCollectionEntries: (collectionEntriesParams: FetchCollectionEntriesMethodParams) => Promise<Array<Content | ContentEdge>>;
    query: (queryParams: QueryParams) => Promise<JSON>;
    spaceProperties: () => Promise<SpaceProperties>;
    productSubscription: (observable: Observable<OperationResult, unknown>, nacelleEntryIds: string[]) => () => void;
    productVariantSubscription: (observable: Observable<OperationResult, unknown>, nacelleEntryIds: string[]) => () => void;
}
export interface OnDataErrorParams {
    method: string;
    params: FetchMethodParams | FetchCollectionMethodParams | QueryParams | NavigationParams | null;
    error: Error | unknown;
}
export interface OnDataError {
    <T>(options: OnDataErrorParams): Promise<T> | T;
}
export interface AfterSubscription {
    method: string;
    callback: <T>(responseObj: T) => Promise<T> | T;
}
export declare function Storefront(params: StorefrontParams): StorefrontInstance;
