import { OperationResult, Client } from '@urql/core';
import { SubscriptionConnectorParams } from '../types';
export interface productData {
    nacelleEntryId: string;
    entryType: string;
    availableForSale: boolean;
}
export interface variantResult {
    variantInventoryUpdatedFilter: {
        nacelleEntryIds: string[];
    };
}
export interface Observable<D, E> {
    onNext: (data: D) => void;
    onError: (error: E) => void;
}
export default class SubscriptionConnector {
    token: string;
    endpoint: string;
    wsClient: Client;
    debugMode?: boolean;
    constructor(params: SubscriptionConnectorParams);
    subscribeToProductUpdate: (observable: Observable<OperationResult, unknown>, nacelleEntryIds: string[]) => (() => void);
    subscribeToProductVariantUpdate: (observable: Observable<OperationResult, unknown>, nacelleEntryIds: string[]) => (() => void);
}
